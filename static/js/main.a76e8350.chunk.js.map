{"version":3,"sources":["actions/index.js","actions/types.js","components/playerCard.js","components/common/PageTitle.js","App.js","serviceWorker.js","reducers/index.js","reducers/playerReducer.js","index.js"],"names":["fetchPlayers","dispatch","a","axios","get","res","type","payload","data","selectPlayer","player","console","log","setPageTitle","title","playerCard","state","showStat","this","props","imgSrc","details","fppg","style","maxWidth","margin","src","onClick","highestFppg","setState","setTimeout","React","Component","defaultProps","connect","surveys","selectedPlayer","actions","PageTitle","subtitle","className","classes","classNames","xs","sm","Choice","confirm","App","generatePlayerCard","obj","key","id","first_name","images","default","url","handler","e","showBtn","players","playerNum","Math","floor","random","playersToRender","playersinArray","greatestPlayerFPPG","count","randomNum","calculateRandom","playerCount","includes","push","fluid","noGutters","renderPlayerList","_meta","Reset","shouldReset","Boolean","window","location","hostname","match","combineReducers","action","check","store","createStore","reducers","applyMiddleware","reduxThunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a76e8350.chunk.js","sourcesContent":["import axios from 'axios';\nimport { FETCH_PLAYER, SELECT_PLAYER, CHANGE_TITLE } from './types';\n\nexport const fetchPlayers = () => async dispatch => {\n  const res = await axios.get('https://gist.githubusercontent.com/liamjdouglas/bb40ee8721f1a9313c22c6ea0851a105/raw/6b6fc89d55ebe4d9b05c1469349af33651d7e7f1/Player.json');\n\n  dispatch({ type: FETCH_PLAYER, payload: res.data });\n};\n\nexport const selectPlayer = (player) => dispatch =>{ // expect player object \n    console.log(\"selectPlayer - action\")\n    dispatch({ type: SELECT_PLAYER, payload: player});\n}\n\nexport const setPageTitle = (title) => dispatch =>{\n    dispatch({ type: CHANGE_TITLE, payload: title});\n}","export const FETCH_PLAYER = 'fetch_player';\nexport const SELECT_PLAYER = 'select_player';\nexport const CHANGE_TITLE = 'change_Title';","import React from \"react\";\nimport {\n  Card,\n  CardTitle,\n  CardImg,\n  CardBody,\n  Button\n} from \"shards-react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from 'react-redux';\nimport * as actions from '../actions';\n\n\nclass playerCard extends React.Component{\n\n  state = {\n    showStat : false\n  }\n\n  render(){\n    const{ title, imgSrc, details, fppg} = this.props;\n  \n    const buttonLocalHandler = () =>{\n      if (fppg === this.props.highestFppg){\n        this.props.setPageTitle(\"Correct!\")\n      }\n      else {\n        this.props.setPageTitle(\"Incorrect!\")\n      }\n      this.setState({showStat : !this.state.showStat})\n      setTimeout(()=>{this.props.setPageTitle(\"Select the player with the highest FPPG!\")}, 1000)\n    }\n  \n    return (\n      <Card style={{ maxWidth: \"250px\", margin:\"10px\" }}>\n        <CardImg style={{ maxWidth: \"200px\", margin:\"25px\"}}src={imgSrc} />\n        <CardBody>\n        <CardTitle>{title}</CardTitle>\n        <p>{details}</p>\n        <p>{ this.state.showStat ? fppg : \"\"}</p>\n        <Button onClick={buttonLocalHandler}>Select Player</Button>\n        </CardBody>\n      </Card>\n    );\n  }\n}\n\nplayerCard.propTypes = {\n    title: PropTypes.string,\n    imgSrc : PropTypes.string,\n    details : PropTypes.string,\n    handler : PropTypes.func,\n}\n\nplayerCard.defaultProps = {\n    title : \"Card Title\",\n    details : \"Fantasy-Points Per Game\",\n    fppg : \"No Value Found\",\n} \n\nfunction mapStateToProps({surveys}) { \n  if (surveys.selectedPlayer){\n    return({\n      highestFppg : surveys.selectedPlayer\n    })\n  }\n  else{\n    return {highestFppg : 0}\n  }\n}\n\nexport default connect(mapStateToProps,actions)(playerCard);","import React from \"react\";\nimport classNames from \"classnames\";\nimport PropTypes from \"prop-types\";\nimport { Col } from \"shards-react\";\nimport { connect } from 'react-redux';\nimport * as actions from '../../actions';\n\nclass PageTitle extends React.Component{\n\n  render(){\n    const{ subtitle, className } = this.props;\n    const classes = classNames(\n      className,\n      \"text-center\",\n      \"text-md-left\",\n      \"mb-sm-0\"\n    );\n    return (\n      <Col xs=\"12\" sm=\"12\" className={classes} >\n        <span className=\"text-uppercase page-subtitle py-5\">{subtitle}</span>\n        <h3 className=\"page-title py-4\">{this.props.Choice}</h3>\n      </Col>\n    )\n  };\n}\n\nPageTitle.propTypes = {\n  title: PropTypes.string,\n  subtitle: PropTypes.string\n};\n\nPageTitle.defaultProps = {\n  subtitle: \"NBA\"\n}\n\nfunction mapStateToProps({surveys}) { \n  if (surveys.confirm){\n    return{\n      Choice : surveys.confirm\n    }\n  }\n  else {\n    return {Choice : \"Select the player with the highest FPPG!\"}\n  }\n}\n\nexport default connect(mapStateToProps,actions)(PageTitle);\n","import React,{Component} from 'react';\nimport './App.css';\nimport PlayerCard from './components/playerCard';\nimport { Container, Row, Col} from \"shards-react\";\nimport PageTitle from \"./components/common/PageTitle\"\nimport { connect } from 'react-redux';\nimport * as actions from './actions';\n\n\nclass App extends Component {\n\n  componentDidMount() {\n    if(!this.props.players){\n      this.props.fetchPlayers();\n    }\n  }\n\n  calculateRandom(playerNum){\n    return Math.floor(Math.random()*playerNum);\n  }\n\n  renderPlayerList(){\n    const numOfPlayer = 4; // Number of Players to Possibly Compare \n    if (this.props.players){\n      let playersToRender = [];\n      let playersinArray = [];\n      let greatestPlayerFPPG = 0;\n      for (let count = 0 ;count < numOfPlayer ; count++){\n        let randomNum = this.calculateRandom(this.props.playerCount);\n        let player = this.props.players[randomNum];\n          while(playersinArray.includes(player.id)){ \n              randomNum = this.calculateRandom(this.props.playerCount)  //reshuffle if the name is already on the list\n              player = this.props.players[randomNum]\n          }\n        if(player.fppg > greatestPlayerFPPG ){ greatestPlayerFPPG = player.fppg } //store the index of the player\n        playersToRender.push( \n          <Col key={count}>\n            <PlayerCard key = {player.id} \n            className = \"col-md mb-4\" \n            title = {player.first_name} \n            imgSrc = {player.images.default.url}\n            fppg = {player.fppg}\n            />\n          </Col>\n        )\n        playersinArray.push(player.id);\n      }\n      this.props.selectPlayer(greatestPlayerFPPG);\n      return playersToRender\n    } else {\n      return <h3>No players found</h3>\n    }\n  }\n\n  generatePlayerCard = (obj) =>{\n    console.log(obj)\n    return(\n      <Col key={obj.id}>\n        <PlayerCard \n        className=\"col-md mb-4\" \n        title={obj.first_name} \n        imgSrc={obj.images.default.url}\n        fppg = {obj.fppg}\n        handler ={(e)=>{}}\n        showBtn = {false}\n        />\n      </Col>\n    )\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n         <Container fluid className=\" main-content-container px-4\">\n            <Row noGutters className=\"py-5 px-2\">\n              <PageTitle className=\"text-md-center mb-3 \" />\n            </Row>\n            <Row noGutters className=\" py-4\">\n            {this.renderPlayerList()}\n            </Row>\n         </Container>\n      </div>\n    );\n  }\n  \n}\n\nfunction mapStateToProps({surveys}) { \n  console.log(\"show surveys:\",surveys)  \n  if(surveys.players){\n    return {\n            players : surveys.players,\n            playerCount : surveys._meta.players.count,\n            Reset : surveys.shouldReset // Change here will cause componentToUpdate\n            }\n  }\n  else return {}\n}\n\nexport default connect(mapStateToProps,actions)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from 'redux';\nimport playerReducer from './playerReducer';\n\nexport default combineReducers({\n  surveys: playerReducer\n});\n","import { FETCH_PLAYER, SELECT_PLAYER, CHANGE_TITLE } from '../actions/types';\n\nexport default function(state = {}, action) {\n  switch (action.type) {\n    // currently fetching players will clear states, but fetch players is only called in intial load..\n    case FETCH_PLAYER: \n      return action.payload;\n    case SELECT_PLAYER:\n            return {...state,\n                selectedPlayer : action.payload,\n                shouldReset : false\n            }\n    case CHANGE_TITLE:\n      let check = false;\n      action.payload ===\"Correct!\" ? check = true : check = false\n            return {...state,\n              confirm : action.payload,\n              shouldReset : check,\n            }\n    default:\n      return state;\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport reduxThunk from 'redux-thunk';\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"shards-ui/dist/css/shards.min.css\"\n\nimport reducers from './reducers';\n\nconst store = createStore(reducers, {}, applyMiddleware(reduxThunk));\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}